"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.

"""

from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import strategy.manager

def menu_static():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    create_strategy_button = KeyboardButton(text="Strategy üìà")
    pnl_button = KeyboardButton(text="PnL üí≤")
    keyboard.add(create_strategy_button, pnl_button)
    return keyboard


def strategy_actions():
    """
    Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏.
    """
    create_strategy_button = InlineKeyboardButton(text="Create Strategy üÜï", callback_data='strategy_create_menu')
    all_strategies_button = InlineKeyboardButton(text="All Strategies üìã", callback_data='strategy_all')
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(create_strategy_button, all_strategies_button)
    return keyboard


def numbers(callback_prefix, count, custom_ids=None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏.
    :param callback_prefix: –¢–µ–∫—Å—Ç –¥–ª—è callback.
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫.
    :return: List, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 5 —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    columns = [[], [], [], [], []]
    ids = [str(i + 1) for i in range(count)]
    if custom_ids is not None:
        ids = custom_ids
    for i in range(count):
        button = InlineKeyboardButton(text=str(i + 1),
                                      callback_data=callback_prefix + ids[i])
        columns[i % 5].append(button)

    empty_button = InlineKeyboardButton(text=' ',
                                        callback_data='None')
    while count % 5 != 0:
        columns[count % 5].append(empty_button)
        count += 1

    return columns


def create_strategy():
    """
    Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=5)
        back_button = InlineKeyboardButton(text='Back to Actions ‚¨ÖÔ∏è',
                                           callback_data='strategy_back')
        keyboard.add(back_button)
        columns = numbers('strategy_create_type_', len(strategy.manager.strategies_types),
                          custom_ids=[str(key) for key in strategy.manager.strategies_types])

        for i in range(len(columns[0])):
            line = []
            for j in range(5):
                line.append(columns[j][i])
            keyboard.add(line[0], line[1], line[2], line[3], line[4])
        return keyboard
    except Exception as err:
        print(str(err))
        # admin.error(error_admin_text='–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã my_texts ' + str(err))
        return None

def create_strategy_type():
    """
    Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–∏–¥–∞–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    try:
        keyboard = InlineKeyboardMarkup()
        back_button = InlineKeyboardButton(text='Back to strategy types ‚¨ÖÔ∏è',
                                           callback_data='strategy_create_type_back')
        keyboard.add(back_button)
        return keyboard
    except Exception as err:
        print(str(err))
        # admin.error(error_admin_text='–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã my_texts ' + str(err))
        return None

def all_strategies(database):
    """
    Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=5)
        back_button = InlineKeyboardButton(text='Back to Actions ‚¨ÖÔ∏è',
                                           callback_data='strategy_back')
        keyboard.add(back_button)

        query = f"""
                    SELECT strategyId
                    FROM strategies 
                    """
        data = database.execute_query(query)
        strategies = [el[0] for el in data]
        columns = numbers('strategy_entity_', len(data), strategies)
        for i in range(len(columns[0])):
            line = []
            for j in range(5):
                line.append(columns[j][i])
            keyboard.add(line[0], line[1], line[2], line[3], line[4])
        return keyboard
    except Exception as err:
        print(str(err))
        # admin.error(error_admin_text='–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã my_texts ' + str(err))
        return None


def strategy_info(strategy_id):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    :param strategy_id: Id —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    try:
        strategy_id = str(strategy_id)
        keyboard = InlineKeyboardMarkup()
        title = InlineKeyboardButton(text="Title üè∑",
                                     callback_data="strategy_title_" + strategy_id)
        delete = InlineKeyboardButton(text="Delete ‚ùåÔ∏è",
                                      callback_data="strategy_delete_" + strategy_id)
        edit = InlineKeyboardButton(text="Edit üìù",
                                    callback_data="strategy_edit_" + strategy_id)

        back_button = InlineKeyboardButton(text='Back ‚¨ÖÔ∏è',
                                           callback_data='strategy_all')
        keyboard.add(back_button)
        keyboard.add(title, edit)
        keyboard.add(delete)
        return keyboard
    except Exception as err:
        str(err)
        # admin.error(error_admin_text='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ' + str(err))
        return None
